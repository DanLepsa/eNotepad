import { app, BrowserWindow, Menu, dialog, ipcMain } from "electron";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  setMainMenu(mainWindow);

  handleEvents(mainWindow);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const isMac = process.platform === "darwin";

const setMainMenu = (mainWindow: BrowserWindow) => {
  const template = [
    // { role: 'appMenu' }
    ...(isMac
      ? [
          {
            label: app.name,
            submenu: [
              { role: "about" },
              { type: "separator" },
              { role: "services" },
              { type: "separator" },
              { role: "hide" },
              { role: "hideOthers" },
              { role: "unhide" },
              { type: "separator" },
              { role: "quit" },
            ],
          },
        ]
      : []),
    // { role: 'fileMenu' }
    {
      label: "File",
      submenu: [
        {
          label: "Open File",
          accelerator: "CmdOrCtrl+O",
          click() {
            dialog
              .showOpenDialog(mainWindow, {
                properties: ["openFile"],
              })
              .then((fileObj) => {
                if (!fileObj.canceled) {
                  mainWindow.webContents.send("FILE_OPEN", fileObj.filePaths);
                }
              })
              .catch((err) => {
                console.error(err);
              });
          },
        },
        {
          label: "Save File",
          accelerator: "CmdOrCtrl+S",
          click() {
            mainWindow.webContents.send("FILE_SAVE");
          },
        },
        {
          label: "Save As...",
          accelerator: "Shift+CmdOrCtrl+S",
          click() {
            dialog
              .showSaveDialog(mainWindow)
              .then((fileObj) => {
                if (!fileObj.canceled) {
                  mainWindow.webContents.send("FILE_SAVE_AS", fileObj.filePath);
                }
              })
              .catch((err) => {
                console.error(err);
              });
          },
        },
        isMac ? { role: "close" } : { role: "quit" },
      ],
    },
    // { role: 'editMenu' }
    {
      label: "Edit",
      submenu: [
        { role: "undo" },
        { role: "redo" },
        { type: "separator" },
        { role: "cut" },
        { role: "copy" },
        { role: "paste" },
        ...(isMac
          ? [
              { role: "pasteAndMatchStyle" },
              { role: "delete" },
              { role: "selectAll" },
              { type: "separator" },
              {
                label: "Speech",
                submenu: [{ role: "startSpeaking" }, { role: "stopSpeaking" }],
              },
            ]
          : [{ role: "delete" }, { type: "separator" }, { role: "selectAll" }]),
      ],
    },
    // { role: 'viewMenu' }
    {
      label: "View",
      submenu: [
        { role: "reload" },
        { role: "forceReload" },
        { role: "toggleDevTools" },
        { type: "separator" },
        { role: "resetZoom" },
        { role: "zoomIn" },
        { role: "zoomOut" },
        { type: "separator" },
        { role: "togglefullscreen" },
      ],
    },

    {
      label: "Window",
      submenu: [{ role: "minimize" }, { role: "zoom" }],
    },
  ];

  const menu = Menu.buildFromTemplate(template as any);
  Menu.setApplicationMenu(menu);
};

const handleEvents = (mainWindow: BrowserWindow) => {
  // >> Treat dialog events here
  ipcMain.on("DIRTY_TAB_DIALOG_QUESTION", (event, args) => {
    const options = {
      type: "question",
      buttons: ["Cancel", "Save", "Don't Save"],
      title: "Question",
      message: "Do you want to save the changes ?",
      detail: "Your changes will be lost if you don't save them.",
    };

    dialog.showMessageBox(null, options).then(({ response }) => {
      // BrowserWindow.getAllWindows()[0].webContents.send(
      mainWindow.webContents.send("DIRTY_TAB_DIALOG_ANSWER", {
        response: response,
        tabIndex: args.tabIndex as number,
      });
    });
  });

  ipcMain.on("OPEN_SAVE_AS_DIALOG", (event, args) => {
    dialog
      .showSaveDialog(mainWindow)
      .then((fileObj) => {
        if (!fileObj.canceled) {
          mainWindow.webContents.send("FILE_SAVE_AS", fileObj.filePath);
        }
      })
      .catch((err) => {
        console.error(err);
      });
  });
};
